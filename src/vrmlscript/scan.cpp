/* A lexical scanner generated by flex */

#include "stdafx.h"


#define FLEX_SCANNER

#ifdef _WIN32
#include <io.h>
#endif

#include <stdlib.h>
#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
    extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
    }
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *      yyless( 5 );
 *  else
 *      do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
    {
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;       /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    int yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;      /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;     /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
typedef unsigned char YY_CHAR;
typedef int yy_state_type;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
    yyleng = yy_cp - yy_bp; \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 108
static const short int yy_accept[311] =
    {   0,
        0,    0,  108,  106,    1,    1,   30,    4,   29,   23,
        5,   27,   25,    9,   26,   31,   28,    6,    8,   46,
       13,   21,   10,   45,  105,  105,  105,   32,   33,   24,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   22,   47,    1,   15,
       38,   19,   42,   36,   48,   34,   49,   35,    8,    2,
        3,   37,    8,    6,    8,    0,    0,   17,   14,   12,
       11,   16,  105,  105,  105,   43,  105,  105,  105,  105,
      105,  105,  105,  105,  105,   61,  105,  105,  105,  105,
      105,  105,  105,  105,   73,  105,   76,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,   44,   20,    8,    0,
        8,    7,   39,   40,   18,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,   70,  105,  105,  105,  105,   78,  105,
      105,   82,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  100,  101,  105,
      105,  105,   41,  105,   99,  105,  105,  105,   53,   54,
      105,   56,  105,  105,  105,  105,  105,   63,  105,  105,
      105,  105,  105,   72,  105,  105,  105,  105,   80,  105,

       83,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,   94,  105,  105,   98,  102,  105,  104,   66,  105,
      105,   52,   55,   57,   58,  105,  105,  105,  105,   65,
       67,   69,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,   89,  105,   91,  105,  105,   95,  105,
      103,  105,  105,  105,  105,   62,  105,  105,  105,  105,
       75,  105,  105,   81,  105,  105,  105,   87,   88,   90,
       92,  105,   96,  105,  105,   51,  105,   60,   64,   68,
      105,  105,  105,  105,   84,   85,  105,  105,  105,   50,
       59,   71,  105,  105,  105,  105,  105,  105,  105,  105,

       79,   86,  105,   97,   74,   77,  105,  105,   93,    0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    1,
        1,    9,   10,   11,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    1,   19,
       20,   21,   22,    1,   23,   24,   24,   24,   25,   26,
       27,   27,   27,   27,   27,   28,   27,   27,   27,   27,
       27,   29,   30,   31,   32,   27,   27,   33,   27,   27,
       34,    1,   35,   36,   27,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   27,   46,   47,   48,   49,
       50,   51,   27,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    1,   61,    1,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1
    } ;

static const short int yy_base[313] =
    {   0,
        0,    0,  376,  377,   61,   63,  355,  377,  354,   60,
      377,  353,   58,  377,   57,   55,   65,   71,   76,  377,
       56,  352,   61,  377,    0,  348,  341,  377,  377,  349,
      330,   47,   58,   53,   51,   73,  317,   65,  316,   78,
       79,  324,   67,   83,   88,   92,   80,  377,  137,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  127,  377,
      377,  377,  130,  141,  147,  163,    0,  344,  377,  377,
      377,  128,    0,  335,  330,  377,  308,  310,  318,  304,
       97,  320,  319,  306,  312,  298,  299,  297,  303,  300,
      298,  295,  297,  291,    0,  293,  116,  294,  288,  284,

      293,  300,  131,  300,  283,  286,  298,  283,  288,  283,
       38,  128,  279,  285,  284,  274,  377,  377,  169,  174,
      180,    0,  377,  377,  307,  296,  300,  270,  276,  285,
      280,  279,  280,  266,  264,  139,  279,  277,  273,  272,
      259,  274,  273,    0,  270,  258,  127,  253,  265,  262,
      259,    0,  256,  256,  245,  246,  252,  243,  245,  242,
      254,  240,  254,  239,  241,  241,  248,    0,    0,  248,
      240,  242,  377,  260,    0,  232,  242,  236,    0,    0,
      237,    0,  227,  225,  233,  222,  229,    0,  226,  233,
      226,  218,  217,    0,  229,  217,  231,  215,    0,  210,

        0,  228,  227,  222,  217,  209,  206,  214,  206,  218,
      212,    0,  198,  201,    0,    0,  212,    0,    0,  215,
      214,    0,    0,    0,    0,  201,  202,  207,  207,    0,
      199,    0,  200,  196,  189,  193,  199,  199,  196,  184,
      198,  197,  186,    0,  195,    0,  189,  180,  178,  185,
        0,  190,  179,  172,  172,    0,  172,  165,  173,  181,
        0,  182,  183,    0,  178,  177,  163,    0,    0,    0,
        0,  166,    0,  174,  160,    0,  172,    0,    0,    0,
      160,  159,  166,  167,    0,    0,  164,  155,  154,    0,
        0,    0,  148,  151,  159,  159,  153,  113,  108,  117,

        0,    0,   93,    0,    0,    0,   91,   90,    0,  377,
      209,   71
    } ;

static const short int yy_def[313] =
    {   0,
      310,    1,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  311,  311,  311,  310,  310,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  312,  310,  310,  310,
      310,  310,  311,  311,  311,  310,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  310,  310,  310,  310,
      310,  312,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  310,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,    0,
      310,  310
    } ;

static const short int yy_nxt[440] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   26,   25,   25,   25,   25,
       27,   25,   25,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   25,   38,   25,   39,   25,   40,   25,
       41,   42,   43,   44,   25,   45,   46,   25,   25,   25,
       47,   48,   49,   49,   49,   49,   52,   55,   57,   59,
       59,   59,  122,   60,   68,   69,   58,   56,   61,   53,
       71,   72,  164,   63,   62,   64,   64,   65,   63,  165,
       65,   65,   65,   85,   81,   66,   78,   87,   79,  117,

       66,   82,   86,   67,   83,   80,   95,   84,   88,   89,
      106,   66,   96,   97,   99,  102,   66,   90,  100,   91,
      107,  108,   92,  109,  113,  110,  111,   93,   67,  309,
      103,  308,  101,  104,  112,  115,  116,  114,   49,   49,
      118,   59,   59,   59,  119,  119,  119,  124,  125,  132,
      133,   66,  307,   63,   66,   64,   64,   65,  306,   63,
      305,   65,   65,   65,  166,   66,  304,   66,  148,  149,
       66,   66,  120,  195,  120,  155,  196,  121,  121,  121,
      156,   66,  167,  119,  119,  119,  168,   66,  121,  121,
      121,  184,  185,   66,  121,  121,  121,  303,  302,  301,

      300,  299,  298,  297,  296,  295,  294,  293,  292,   66,
       73,   73,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,

      203,  202,  201,  200,  199,  198,  197,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  163,  162,  161,  160,  159,  158,  157,  154,  153,
      152,  151,  150,  147,  146,  145,  144,  143,  142,  141,
      140,  139,  138,  137,  136,  135,  134,  131,  130,  129,
      128,  127,  126,  123,  105,   98,   94,   77,   76,   75,
       74,   70,   54,   51,   50,  310,    3,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310
    } ;

static const short int yy_chk[440] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,   10,   13,   15,   16,
       16,   16,  312,   17,   21,   21,   15,   13,   17,   10,
       23,   23,  111,   18,   17,   18,   18,   18,   19,  111,
       19,   19,   19,   34,   33,   18,   32,   35,   32,   47,

       19,   33,   34,   18,   33,   32,   38,   33,   35,   36,
       43,   18,   38,   38,   40,   41,   19,   36,   40,   36,
       43,   43,   36,   43,   45,   43,   44,   36,   18,  308,
       41,  307,   40,   41,   44,   46,   46,   45,   49,   49,
       47,   59,   59,   59,   63,   63,   63,   72,   72,   81,
       81,   59,  303,   64,   63,   64,   64,   64,  300,   65,
      299,   65,   65,   65,  112,   64,  298,   59,   97,   97,
       63,   65,   66,  147,   66,  103,  147,   66,   66,   66,
      103,   64,  112,  119,  119,  119,  112,   65,  120,  120,
      120,  136,  136,  119,  121,  121,  121,  297,  296,  295,

      294,  293,  289,  288,  287,  284,  283,  282,  281,  119,
      311,  311,  277,  275,  274,  272,  267,  266,  265,  263,
      262,  260,  259,  258,  257,  255,  254,  253,  252,  250,
      249,  248,  247,  245,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  231,  229,  228,  227,  226,
      221,  220,  217,  214,  213,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  200,  198,  197,  196,  195,
      193,  192,  191,  190,  189,  187,  186,  185,  184,  183,
      181,  178,  177,  176,  174,  172,  171,  170,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,

      155,  154,  153,  151,  150,  149,  148,  146,  145,  143,
      142,  141,  140,  139,  138,  137,  135,  134,  133,  132,
      131,  130,  129,  128,  127,  126,  125,  116,  115,  114,
      113,  110,  109,  108,  107,  106,  105,  104,  102,  101,
      100,   99,   98,   96,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   85,   84,   83,   82,   80,   79,   78,
       77,   75,   74,   68,   42,   39,   37,   31,   30,   27,
       26,   22,   12,    9,    7,    3,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
//# line 1 "scan.lpp"
/* 
 *  Vs Lexical Analyzer (scanner)
 */
//# line 5 "scan.lpp"
//#include "stdafx.h"
// move to first line 
#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#undef input
#undef unput

#include "vsexpr.h"
#include "vsfunction.h"
#include "vsstatement.h"
#include "vsparse.h"

#include "y_tab.h"
#include "greporter.h"

// Lex and YACC are hard-coded for these routine names:
#define input() VsParseTree::input()
#define unput(_char) VsParseTree::unput(_char)
#define yyerror(_error) VsParseTree::yyerror(_error)

//HG
#define YY_INPUT(buf,result,max_size) \
        { \
        int c = input(); \
        result = c == 0 ? 0 : 1; \
        buf[0] = (char) c; \
        } 

static int curStringLength = 0;

/* debugging macros */

int lldebug = 0;



#ifdef DEBUG
#define RET(x)  { \
            if (lldebug) printf("lex %hu [%s]\n", (int) x, yytext); \
            return(x); \
        }
#else
#define RET(x)  return(x)
#endif

/* forward references defined in this module */
void skipSlashStarComments(void);
char *getStringConstant(char delimiter);


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( yy_current_buffer->yy_is_interactive ) \
        { \
        int c = getc( yyin ); \
        result = c == EOF ? 0 : 1; \
        buf[0] = (char) c; \
        } \
    else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
          && ferror( yyin ) ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

//# line 64 "scan.lpp"



    if ( yy_init )
        {
#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;   /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( yy_current_buffer )
            yy_init_buffer( yy_current_buffer, yyin );
        else
            yy_current_buffer =
                yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();

        yy_init = 0;
        }

    while ( 1 )     /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
yy_match:
        do
            {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 311 )
                    yy_c = yy_meta[(unsigned int) yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            ++yy_cp;
            }
        while ( yy_base[yy_current_state] != 377 );

yy_find_action:
        yy_act = yy_accept[yy_current_state];

        YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = yy_hold_char;
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            goto yy_find_action;

case 1:
YY_USER_ACTION
//# line 66 "scan.lpp"
{ ; }
    YY_BREAK
case 2:
YY_USER_ACTION
//# line 68 "scan.lpp"
{ skipSlashStarComments(); }
    YY_BREAK
case 3:
YY_USER_ACTION
//# line 69 "scan.lpp"
{ int c; while ( (c =input()) != '\n') { if ( (c<=0) || (c==13)) break; }
    YY_BREAK
case 4:
YY_USER_ACTION
//# line 71 "scan.lpp"
{
/* single and double quote enclosed string constants */
            char *string = getStringConstant('\"');

            yylval.string = string;

            RET(tSTRING);
        }
    YY_BREAK
case 5:
YY_USER_ACTION
//# line 80 "scan.lpp"
{
/* single and double quote enclosed string constants */
            char *string = getStringConstant('\'');

            yylval.string = string;

            RET(tSTRING);
        }
    YY_BREAK
case 6:
YY_USER_ACTION
//# line 90 "scan.lpp"
{ yylval.number = strtol(yytext, NULL, 0); RET(tNUMBER); }
    YY_BREAK
case 7:
YY_USER_ACTION
//# line 91 "scan.lpp"
{ yylval.number = strtol(yytext, NULL, 0); RET(tNUMBER); }
    YY_BREAK
case 8:
YY_USER_ACTION
//# line 92 "scan.lpp"
{ yylval.number = atof(yytext); RET(tNUMBER); }
    YY_BREAK
case 9:
YY_USER_ACTION
//# line 94 "scan.lpp"
{ RET(tCOMMA); }  /* ??? */
    YY_BREAK
case 10:
YY_USER_ACTION
//# line 95 "scan.lpp"
{ RET(tGT); }
    YY_BREAK
case 11:
YY_USER_ACTION
//# line 96 "scan.lpp"
{ RET(tGE); }
    YY_BREAK
case 12:
YY_USER_ACTION
//# line 97 "scan.lpp"
{ RET(tEQ); }
    YY_BREAK
case 13:
YY_USER_ACTION
//# line 98 "scan.lpp"
{ RET(tLT); }
    YY_BREAK
case 14:
YY_USER_ACTION
//# line 99 "scan.lpp"
{ RET(tLE); }
    YY_BREAK
case 15:
YY_USER_ACTION
//# line 100 "scan.lpp"
{ RET(tNE); }
    YY_BREAK
case 16:
YY_USER_ACTION
//# line 101 "scan.lpp"
{ RET(tRSHIFT); }       
    YY_BREAK
case 17:
YY_USER_ACTION
//# line 102 "scan.lpp"
{ RET(tLSHIFT); }       
    YY_BREAK
case 18:
YY_USER_ACTION
//# line 103 "scan.lpp"
{ RET(tRSHIFTFILL); }   
    YY_BREAK
case 19:
YY_USER_ACTION
//# line 104 "scan.lpp"
{ RET(tLAND); }
    YY_BREAK
case 20:
YY_USER_ACTION
//# line 105 "scan.lpp"
{ RET(tLOR); }
    YY_BREAK
case 21:
YY_USER_ACTION
//# line 107 "scan.lpp"
{ RET(tASSIGN); }
    YY_BREAK
case 22:
YY_USER_ACTION
//# line 108 "scan.lpp"
{ RET(tOR); }       
    YY_BREAK
case 23:
YY_USER_ACTION
//# line 109 "scan.lpp"
{ RET(tAND); }      
    YY_BREAK
case 24:
YY_USER_ACTION
//# line 110 "scan.lpp"
{ RET(tXOR); }      
    YY_BREAK
case 25:
YY_USER_ACTION
//# line 111 "scan.lpp"
{ RET(tPLUS); }
    YY_BREAK
case 26:
YY_USER_ACTION
//# line 112 "scan.lpp"
{ RET(tMINUS); }
    YY_BREAK
case 27:
YY_USER_ACTION
//# line 113 "scan.lpp"
{ RET(tMULTIPLY); }
    YY_BREAK
case 28:
YY_USER_ACTION
//# line 114 "scan.lpp"
{ RET(tDIVIDE); }
    YY_BREAK
case 29:
YY_USER_ACTION
//# line 115 "scan.lpp"
{ RET(tMOD); }
    YY_BREAK
case 30:
YY_USER_ACTION
//# line 116 "scan.lpp"
{ RET(tNOT); }
    YY_BREAK
case 31:
YY_USER_ACTION
//# line 117 "scan.lpp"
{ RET(tDOT); }
    YY_BREAK
case 32:
YY_USER_ACTION
//# line 118 "scan.lpp"
{ RET(tRIGHTBRACKET); }
    YY_BREAK
case 33:
YY_USER_ACTION
//# line 119 "scan.lpp"
{ RET(tLEFTBRACKET); }
    YY_BREAK
case 34:
YY_USER_ACTION
//# line 121 "scan.lpp"
{ RET(tPLUSEQ); } 
    YY_BREAK
case 35:
YY_USER_ACTION
//# line 122 "scan.lpp"
{ RET(tMINUSEQ); } 
    YY_BREAK
case 36:
YY_USER_ACTION
//# line 123 "scan.lpp"
{ RET(tMULTIPLYEQ); } 
    YY_BREAK
case 37:
YY_USER_ACTION
//# line 124 "scan.lpp"
{ RET(tDIVIDEEQ); } 
    YY_BREAK
case 38:
YY_USER_ACTION
//# line 125 "scan.lpp"
{ RET(tMODEQ); } 
    YY_BREAK
case 39:
YY_USER_ACTION
//# line 126 "scan.lpp"
{ RET(tLSHIFTEQ); }     
    YY_BREAK
case 40:
YY_USER_ACTION
//# line 127 "scan.lpp"
{ RET(tRSHIFTEQ); }     
    YY_BREAK
case 41:
YY_USER_ACTION
//# line 128 "scan.lpp"
{ RET(tRSHIFTFILLEQ); } 
    YY_BREAK
case 42:
YY_USER_ACTION
//# line 129 "scan.lpp"
{ RET(tANDEQ); }        
    YY_BREAK
case 43:
YY_USER_ACTION
//# line 130 "scan.lpp"
{ RET(tXOREQ); }        
    YY_BREAK
case 44:
YY_USER_ACTION
//# line 131 "scan.lpp"
{ RET(tOREQ); }     
    YY_BREAK
case 45:
YY_USER_ACTION
//# line 132 "scan.lpp"
{ RET(tCONDTEST); } 
    YY_BREAK
case 46:
YY_USER_ACTION
//# line 133 "scan.lpp"
{ RET(tCONDSEP); } 
    YY_BREAK
case 47:
YY_USER_ACTION
//# line 134 "scan.lpp"
{ RET(tONESCOMP); }     
    YY_BREAK
case 48:
YY_USER_ACTION
//# line 135 "scan.lpp"
{ RET(tINCREMENT); } 
    YY_BREAK
case 49:
YY_USER_ACTION
//# line 136 "scan.lpp"
{ RET(tDECREMENT); } 
    YY_BREAK
case 50:
YY_USER_ACTION
//# line 138 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 51:
YY_USER_ACTION
//# line 139 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 52:
YY_USER_ACTION
//# line 140 "scan.lpp"
{ RET(tBREAK); }
    YY_BREAK
case 53:
YY_USER_ACTION
//# line 141 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 54:
YY_USER_ACTION
//# line 142 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 55:
YY_USER_ACTION
//# line 143 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 56:
YY_USER_ACTION
//# line 144 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 57:
YY_USER_ACTION
//# line 145 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 58:
YY_USER_ACTION
//# line 146 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 59:
YY_USER_ACTION
//# line 147 "scan.lpp"
{ RET(tCONTINUE); }
    YY_BREAK
case 60:
YY_USER_ACTION
//# line 148 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 61:
YY_USER_ACTION
//# line 149 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 62:
YY_USER_ACTION
//# line 150 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 63:
YY_USER_ACTION
//# line 151 "scan.lpp"
{ RET(tELSE); }
    YY_BREAK
case 64:
YY_USER_ACTION
//# line 152 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 65:
YY_USER_ACTION
//# line 153 "scan.lpp"
{ yylval.number = 0.0; RET(tNUMBER); }
    YY_BREAK
case 66:
YY_USER_ACTION
//# line 154 "scan.lpp"
{ yylval.number = 0.0; RET(tNUMBER); }
    YY_BREAK
case 67:
YY_USER_ACTION
//# line 155 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 68:
YY_USER_ACTION
//# line 156 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 69:
YY_USER_ACTION
//# line 157 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 70:
YY_USER_ACTION
//# line 158 "scan.lpp"
{ RET(tFOR); }
    YY_BREAK
case 71:
YY_USER_ACTION
//# line 159 "scan.lpp"
{ RET(tFUNCTION); }
    YY_BREAK
case 72:
YY_USER_ACTION
//# line 160 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 73:
YY_USER_ACTION
//# line 161 "scan.lpp"
{ RET(tIF); }
    YY_BREAK
case 74:
YY_USER_ACTION
//# line 162 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 75:
YY_USER_ACTION
//# line 163 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 76:
YY_USER_ACTION
//# line 164 "scan.lpp"
{ RET(tIN); }
    YY_BREAK
case 77:
YY_USER_ACTION
//# line 165 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 78:
YY_USER_ACTION
//# line 166 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 79:
YY_USER_ACTION
//# line 167 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 80:
YY_USER_ACTION
//# line 168 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 81:
YY_USER_ACTION
//# line 169 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 82:
YY_USER_ACTION
//# line 170 "scan.lpp"
{ RET(tNEW); }
    YY_BREAK
case 83:
YY_USER_ACTION
//# line 171 "scan.lpp"
{ RET(tNULL); }
    YY_BREAK
case 84:
YY_USER_ACTION
//# line 172 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 85:
YY_USER_ACTION
//# line 173 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 86:
YY_USER_ACTION
//# line 174 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 87:
YY_USER_ACTION
//# line 175 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 88:
YY_USER_ACTION
//# line 176 "scan.lpp"
{ RET(tRETURN); }
    YY_BREAK
case 89:
YY_USER_ACTION
//# line 177 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 90:
YY_USER_ACTION
//# line 178 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 91:
YY_USER_ACTION
//# line 179 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 92:
YY_USER_ACTION
//# line 180 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 93:
YY_USER_ACTION
//# line 181 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 94:
YY_USER_ACTION
//# line 182 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 95:
YY_USER_ACTION
//# line 183 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 96:
YY_USER_ACTION
//# line 184 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 97:
YY_USER_ACTION
//# line 185 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 98:
YY_USER_ACTION
//# line 186 "scan.lpp"
{ yylval.number = 1.0; RET(tNUMBER); }
    YY_BREAK
case 99:
YY_USER_ACTION
//# line 187 "scan.lpp"
{ yylval.number = 1.0; RET(tNUMBER); }
    YY_BREAK
case 100:
YY_USER_ACTION
//# line 188 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 101:
YY_USER_ACTION
//# line 189 "scan.lpp"
{ RET(tVAR); }
    YY_BREAK
case 102:
YY_USER_ACTION
//# line 190 "scan.lpp"
{ RET(tUNIMPL_KEYWORD); }
    YY_BREAK
case 103:
YY_USER_ACTION
//# line 191 "scan.lpp"
{ RET(tWHILE); }
    YY_BREAK
case 104:
YY_USER_ACTION
//# line 192 "scan.lpp"
{ RET(tWITH); }
    YY_BREAK
case 105:
YY_USER_ACTION
//# line 194 "scan.lpp"
{ yylval.string = strdup(yytext); RET(tIDENTIFIER); }
    YY_BREAK
case 106:
YY_USER_ACTION
//# line 196 "scan.lpp"
RET (yytext[0]); /* anything else */
    YY_BREAK
case 107:
YY_USER_ACTION
//# line 198 "scan.lpp"
ECHO;
    YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                            yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = yy_c_buf_p - yytext_ptr;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

            b->yy_buf_size *= 2;
            b->yy_ch_buf = (char *)
                yy_flex_realloc( (void *) b->yy_ch_buf,
                         b->yy_buf_size );

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move - YY_MORE_ADJ == 1 )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yytext begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active.
     */

    yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = yy_start;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] )
            {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
            }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 311 )
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
    {
    register int yy_is_jam;
    register char *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
        {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
        }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 311 )
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 310);

    return yy_is_jam ? 0 : yy_current_state;
    }


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += dest - source;
        yy_bp += dest - source;
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
        yy_cp[-2] = '\n';

    *--yy_cp = (char) c;


    /* Note: the formal parameter *must* be called "yy_bp" for this
     * macro to now work correctly.
     */
    YY_DO_BEFORE_ACTION; /* set up yytext again */
    }


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;  /* cast for 8-bit char's */
    *yy_c_buf_p = '\0'; /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

    return c;
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    yy_init_buffer( b, file );

    return b;
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
    {
    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    yy_flex_free( (void *) b->yy_ch_buf );
    yy_flex_free( (void *) b );
    }


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
    {
    b->yy_input_file = file;

    /* We put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

    b->yy_fill_buffer = 1;

    b->yy_buffer_status = YY_BUFFER_NEW;
    }


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        int new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }


static void yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }


static int yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
    {
    (void) fprintf( stderr, "%s\n", msg );
    exit( 1 );
    }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
    {
    return (void *) realloc( ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }
//# line 198 "scan.lpp"


/* 
 *   Skip comments enclosed in slash-star ... star-slash pairs
 */

static void skipSlashStarComments(void)

{
    char cChar;

    for ( ; ; )
    {
    while ((cChar = input()) != '*') ;
    if (input() != '/') 
    {
        unput(yytext[yyleng-1]);
    }
    else return;
    }
}

static char *getStringConstant(char delimiter)
{
    // READ IN A STRING CONSTANT
    // THIS GOES "OUTSIDE" OF THE LEXER SINCE NO RULES
    // SHOULD FIRE UNTIL CLOSING delimiter IS READ
    // read in the string until the matching delimiter
    int len = 0;
    int maxlen = 64;
    char cChar;
    char *startChar = new char[maxlen];
    while ((cChar = input()) != delimiter) { 
    if (len == maxlen) {
        char* tmpStr = new char[2*maxlen];

        for (int i=0; i<maxlen; i++) {
        tmpStr[i] = startChar[i];
        }
        maxlen *= 2;
        delete[] startChar;
        startChar = tmpStr;
    }
    startChar[len++] = cChar;
    }
    startChar[len] = '\0';

    return startChar;
}

